---
  - name: playbook to install the MDC
    hosts: local
    connection: local
    vars:
      local_path: "{{ lookup('env', 'HOME') }}"
      anaconda_path: "{{ local_path }}/anaconda"
      mdc_path: "{{ local_path }}/git/mdc"

    tasks:

      - name: apt-get installs
        apt:
          name: "{{ item }}"
          state: present
          force: yes
        become: true
        with_items:
          - bzip2
          - mongodb
          - python-pip
          - libxslt1-dev
          - libldap2-dev
          - libsasl2-dev
          - python-dev
          - libldap2-dev
          - libssl-dev

      - name: check if anaconda is installed
        stat: path={{ anaconda_path }}
        register: anaconda_dir

      - name: download miniconda
        get_url:
          url: https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
          dest: /tmp
          force: no
        when: anaconda_dir.stat.exists == False

      - name: install miniconda
        shell: bash /tmp/Miniconda-latest-Linux-x86_64.sh -b -p {{ anaconda_path }}
        args:
          creates: "{{ anaconda_path }}"
        when: anaconda_dir.stat.exists == False

      - name: update conda
        shell: "{{ anaconda_path }}/bin/conda update conda"

      - name: clone MDC
        git:
          repo: https://github.com/usnistgov/mdcs.git
          dest: "{{ mdc_path }}"
          version: stable

      - name: install new enviroment
        shell: "{{ anaconda_path }}/bin/conda env update -n root --file environment.yml"

      - name: make mongodb directory for database
        file: path=/data/db state=directory mode=0755
        become: true

      - name: install pymongo
        pip: name=pymongo executable=/usr/bin/pip
        become: true

      - name: start mongodb
        service: name=mongodb state=started
        become: true

      - name: wait for mongodb to be available
        wait_for:
          port: 27017

      - name: add mongo admin user
        become: true
        mongodb_user:
          database: admin
          name: mgi_admin
          password: password
          roles: ["readAnyDatabase", "userAdminAnyDatabase", "dbAdmin", "backup", "restore"]
        tags:
          - add_admin_user

      - name: add mongo regular user
        become: true
        mongodb_user:
          database: mgi
          name: mgi_user
          password: mgi_password
          roles: ["readWrite"]
          login_password: password

      - name: initialize the django app
        command: chdir={{ mdc_path }} {{ anaconda_path }}/bin/python manage.py syncdb --noinput

      - name: run the server
        command: chdir={{ mdc_path }} {{ anaconda_path }}/bin/python manage.py runserver > /dev/null 2>&1 &
